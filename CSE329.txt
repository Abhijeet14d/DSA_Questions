#include <iostream>
using namespace std;

int main(){
  int arr[] = {1,2,3,4,5,6,7,8,9,10};
  int n = 10;
  int r = 3;

  r = r%n;

  // this is the code for r left rotations in an arrays.
  for(int i=0,j=r-1;i<j;i++,j--){ // this is the code to reverse first r elements from the array.
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
  for(int i=r,j=n-1;i<j;i++,j--){ // this is the code to reverse rest of the elements from the array.
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
  for(int i=0,j=n-1;i<j;i++,j--){  // this is the code to reverse the whole array.
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }

  for(int i=0;i<n;i++){
    cout << arr[i] << ", ";
  }
  cout << endl;


}









#include <iostream>
using namespace std;

int main(){
  int arr[] = {1,2,3,4,5,6,7,8,9,10};
  int n = 10;
  int r = 3;

  r = r%n;

  // this is the code for r right rotations in an arrays.
  for(int i=0,j=n-r-1;i<j;i++,j--){ // this is the code to reverse the array till the rth index from last.
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
  for(int i=0,j=n-1;i<j;i++,j--){  // this is the code to reverse the whole array.
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }

  for(int i=0;i<n;i++){
    cout << arr[i] << ", ";
  }
  cout << endl;

  
}



//  Matrix multiplication

#include <iostream>
using namespace std;

int main(){
  int r1,r2,c1,c2;

  cin >> r1 >> c1 >> r2 >> c2;
  
  int arr1[r1][c1];
  int arr2[r2][c2];

  if(c1 != r2) return 0;

  int arr3[r1][c2] = {0};

  for(int i=0;i<r1;i++){
    for(int j=0;j<c1;j++){
      cin >> arr1[i][j];
    }
  }
  for(int i=0;i<r2;i++){
    for(int j=0;j<c2;j++){
      cin >> arr2[i][j];
    }
  }

  for(int i=0;i<r1;i++){
    for(int j=0;j<c2;j++){
      for(int k = 0;k<c1;k++){
        arr3[i][j] += arr1[i][k]*arr2[k][j];
      }
    }
  }

  for(int i=0;i<r1;i++){
    for(int j=0;j<c2;j++){
      cout << arr3[i][j] << " ";
    }
    cout << endl;
  }
}





// find the peak ELement in an array
// Peak Element is the element which is greater than its both neighbour

// using linear search
#include <iostream>
using namespace std;

int main(){
  int arr[] = {12,10,5,7,6,2};
  int n = 6;

  int peak = -1;
  for(int i=0;i<n;i++){
    if(i==0){
      if(arr[i] > arr[i+1]){
        peak = arr[i];
        break;
      } 
    }else{
      if(arr[i] > arr[i-1] && arr[i] > arr[i+1]){
        peak = arr[i];
        break;
      }
    }
  }
  cout << peak << endl;
}


// using binary search
#include <iostream>
using namespace std;

int findPeakElement(int arr[], int low, int high, int n) {
    int mid = low + (high - low) / 2;

    // Check if mid is a peak element
    if ((mid == 0 || arr[mid] >= arr[mid - 1]) &&
        (mid == n - 1 || arr[mid] >= arr[mid + 1])) {
        return mid;
    }

    // If the left neighbor is greater, the peak lies on the left side
    if (mid > 0 && arr[mid - 1] > arr[mid]) {
        return findPeakElement(arr, low, mid - 1, n);
    }

    // Otherwise, the peak lies on the right side
    return findPeakElement(arr, mid + 1, high, n);
}

int main() {
    int arr[] = {1, 3, 20, 4, 1, 0};
    int n = sizeof(arr) / sizeof(arr[0]);

    int peakIndex = findPeakElement(arr, 0, n - 1, n);
    cout << "The peak element is at index: " << peakIndex << endl;
    cout << "The peak element is: " << arr[peakIndex] << endl;

    return 0;
}









